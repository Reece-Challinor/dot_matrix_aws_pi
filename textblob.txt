🌟 Dot Matrix Intelligence Briefing System 📜🖨️ Welcome to the Dot Matrix Intelligence Briefing System repository! This project combines modern AWS services with vintage computing to create a unique, interactive daily intelligence report, printed on a Panasonic KX-P1592 dot matrix printer via a Raspberry Pi at the press of a button. This project is designed to be an entertaining exploration of AWS architecture, IoT, and retro hardware integration. It's perfect for showing off practical AWS skills with a nostalgic flair. 🚀✨ Project Overview 📈💡 The aim is to build an MVP that aggregates data from various open APIs (weather, security, market) using AWS services, formats the data into a daily intelligence report, and prints it via a classic dot matrix printer. This project includes the integration of modern technologies such as AWS Lambda, S3, DynamoDB, and IoT Core with the Raspberry Pi and the dot matrix printer, controlled with a simple push button. Project Features 🤖 Automated Data Aggregation using AWS Lambda 🔒 Secure API Key Management via AWS Secrets Manager 📡 Real-Time Communication between AWS and Raspberry Pi using AWS IoT Core 🖨️ Vintage Dot Matrix Printing for daily intelligence briefings ⚙️ Retro Aesthetic: ASCII text formatting with classic dot matrix printing File Structure 📂 dot-matrix-intelligence-printer/ ├── README.md ├── hardware/ │ ├── wiring_diagram.png │ └── component_list.txt ├── raspberry_pi/ │ ├── button_listener.py │ ├── print_daemon.py │ ├── printer_interface.py │ ├── data_aggregator.py │ ├── config.py │ └── requirements.txt ├── docs/ │ ├── setup_guide.md │ ├── aws_configuration.md │ └── printing_debugging.md ├── aws/ │ ├── lambda_functions/ │ │ ├── weather_lambda.py │ │ ├── market_data_lambda.py │ │ ├── security_alert_lambda.py │ └── iam_policies/ │ └── lambda_execution_policy.json └── shared/ ├── templates/ │ └── briefing_template.txt └── utils/ └── data_formatter.py Repository Breakdown 🛠️ hardware/: Contains diagrams and details of the physical components and connections. raspberry_pi/: Python scripts running on the Raspberry Pi, including the button listener, print daemon, and data aggregation logic. docs/: Guides for setting up hardware, AWS configuration, and debugging printer issues. aws/: Contains serverless code (Lambda functions) for data aggregation and IAM policies. shared/: Includes templates for formatting printed reports and utility scripts for data processing. Approach & Architecture 🌐🧩 High-Level Architecture Diagram [Push Button] --> [Raspberry Pi] --> [AWS IoT Core] <--> [AWS Lambda Functions] | | [Printer] <-- [CUPS on Pi] <-- [Data from S3/DynamoDB] Push Button: Triggers the Raspberry Pi to start the data aggregation process. Raspberry Pi: Runs scripts to pull data from AWS and initiate the printing process. AWS Lambda: Collects data from various open-source APIs and pushes it to AWS IoT Core. AWS IoT Core: Facilitates real-time communication between Lambda and the Raspberry Pi. S3 & DynamoDB: Stores historical data and report templates for use in report generation. How It Works ⚙️ Button Press: A physical button press triggers the Raspberry Pi to start the daily process. Data Aggregation: The Raspberry Pi connects to AWS IoT Core, which subscribes to MQTT topics published by Lambda functions. Data Formatting: Aggregated data is formatted using ASCII templates. Printing: The formatted briefing is printed by the Panasonic dot matrix printer. Getting Started 🏁 Initial Setup Steps Clone the Repository: git clone https://github.com/your-username/dot-matrix-intelligence-printer.git cd dot-matrix-intelligence-printer Install Dependencies: pip install -r raspberry_pi/requirements.txt Setup Raspberry Pi: Install CUPS for printer management. Set up AWS IoT credentials for Raspberry Pi. Contributing 🤝✨ Contributions are welcome! Please fork this repository, create a branch, make your changes, and submit a pull request. We use conventional commits for versioning. Tag releases with 🎉 for major changes, 🛠️ for bug fixes, and ✨ for new features. Good First Issues: Check out our beginner-friendly tasks to get started. Tags & Branches 🏷️ Branches: main: Stable production code. dev: Experimental and new feature integration. Tags: v0.1: Initial setup and MVP testing. v1.0: First complete version with AWS integration. Architectural Diagrams & ASCII Drawings ✏️💻 All architectural diagrams are available in docs/aws_configuration.md. For that retro touch, ASCII diagrams have been provided to showcase the physical and digital flow of the project. License 📜 This project is licensed under the MIT License. Feel free to use, modify, and distribute it as per the license terms. Acknowledgments 🙌✨ Special thanks to the vintage computing community and AWS for providing the tools and inspiration to make projects like this possible. Enjoy the fun mix of old-school printing and modern cloud infrastructure! 🖨️☁️🚀Dot Matrix Intelligence Briefing System Setup Guide Welcome to the comprehensive setup guide for the Dot Matrix Intelligence Briefing System. This guide will walk you through the step-by-step process of setting up the Raspberry Pi, the dot matrix printer, AWS services, and the physical setup. Table of Contents Hardware Setup Raspberry Pi Configuration AWS Configuration Connecting Everything Testing and Debugging Hardware Setup Components Needed Raspberry Pi (any model with GPIO pins) Panasonic KX-P1592 dot matrix printer Push button Breadboard and jumper wires Power supply for Raspberry Pi Wiring Diagram [Push Button] --> [GPIO Pin on Raspberry Pi] [Printer] <--> [USB-to-Parallel Adapter] <--> [Raspberry Pi] Refer to hardware/wiring_diagram.png for a detailed wiring diagram. Component List Refer to hardware/component_list.txt for a detailed list of components. Raspberry Pi Configuration Initial Setup Install Raspbian OS: Follow the official Raspberry Pi OS installation guide. Update and Upgrade: sudo apt-get update sudo apt-get upgrade Install Dependencies Clone the Repository: git clone https://github.com/your-username/dot-matrix-intelligence-printer.git cd dot-matrix-intelligence-printer Install Python Dependencies: pip install -r raspberry_pi/requirements.txt Setup CUPS for Printer Management Install CUPS: sudo apt-get install cups Add User to lpadmin Group: sudo usermod -aG lpadmin pi Configure Printer: Access CUPS web interface at http://localhost:631. Add the Panasonic KX-P1592 printer. Configure AWS IoT Credentials Install AWS CLI: sudo apt-get install awscli Configure AWS CLI: aws configure Set Up IoT Credentials: Follow the instructions in docs/aws_configuration.md. AWS Configuration Create AWS Resources Create IAM Roles and Policies: Use the policy defined in aws/iam_policies/lambda_execution_policy.json. Set Up AWS IoT Core: Create a new IoT thing and configure certificates. Deploy Lambda Functions: Deploy the Lambda functions located in aws/lambda_functions/. Configure AWS Services S3 Buckets: Create an S3 bucket for storing report templates. DynamoDB Tables: Create DynamoDB tables for storing historical data. Connecting Everything High-Level Architecture Diagram [Push Button] --> [Raspberry Pi] --> [AWS IoT Core] <--> [AWS Lambda Functions] | | [Printer] <-- [CUPS on Pi] <-- [Data from S3/DynamoDB] How It Works Button Press: A physical button press triggers the Raspberry Pi to start the data aggregation process. Data Aggregation: The Raspberry Pi connects to AWS IoT Core, which subscribes to MQTT topics published by Lambda functions. Data Formatting: Aggregated data is formatted using ASCII templates. Printing: The formatted briefing is printed by the Panasonic dot matrix printer. Testing and Debugging Initial Tests Test Button Listener: python raspberry_pi/button_listener.py Test Print Daemon: python raspberry_pi/print_daemon.py Debugging Tips Check the logs in AWS CloudWatch for Lambda function errors. Use raspberry_pi/printing_debugging.md for troubleshooting printer issues. Contributing Contributions are welcome! Please fork this repository, create a branch, make your changes, and submit a pull request. We use conventional commits for versioning. Good First Issues Check out our beginner-friendly tasks to get started. Tags & Branches Branches: main: Stable production code. dev: Experimental and new feature integration. Tags: v0.1: Initial setup and MVP testing. v1.0: First complete version with AWS integration. Happy coding! 🚀✨ 